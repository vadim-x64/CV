// visitor-tracker.js
// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è IP –∞–¥—Ä–µ—Å–∏ –≤—ñ–¥–≤—ñ–¥—É–≤–∞—á—ñ–≤
async function getVisitorIP() {
    try {
        const response = await fetch('https://api.ipify.org?format=json');
        const data = await response.json();
        return data.ip;
    } catch (error) {
        console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ IP:', error);
        return '–Ω–µ–≤—ñ–¥–æ–º–æ';
    }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –ª–æ–∫–∞—Ü—ñ—é –Ω–∞ –æ—Å–Ω–æ–≤—ñ IP
async function getLocationInfo(ip) {
    try {
        const response = await fetch(`https://ipapi.co/${ip}/json/`);
        const data = await response.json();
        return {
            country: data.country_name || '–Ω–µ–≤—ñ–¥–æ–º–æ',
            city: data.city || '–Ω–µ–≤—ñ–¥–æ–º–æ',
            region: data.region || '–Ω–µ–≤—ñ–¥–æ–º–æ'
        };
    } catch (error) {
        console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –ª–æ–∫–∞—Ü—ñ—é:', error);
        return { country: '–Ω–µ–≤—ñ–¥–æ–º–æ', city: '–Ω–µ–≤—ñ–¥–æ–º–æ', region: '–Ω–µ–≤—ñ–¥–æ–º–æ' };
    }
}
function getKyivTime() {
    const now = new Date();

    // –°—Ç–≤–æ—Ä—é—î–º–æ —Ä—è–¥–æ–∫ –¥–∞—Ç–∏/—á–∞—Å—É –≤ –∫–∏—ó–≤—Å—å–∫–æ–º—É —á–∞—Å–æ–≤–æ–º—É –ø–æ—è—Å—ñ
    const options = {
        timeZone: 'Europe/Kiev',
        year: 'numeric',
        month: '2-digit',
        day: '2-digit',
        hour: '2-digit',
        minute: '2-digit',
        second: '2-digit',
        hour12: true
    };

    return new Intl.DateTimeFormat('uk-UA', options).format(now);
}
// –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –≤—ñ–∑–∏—Ç—ñ–≤
async function trackVisit() {
    const visitTimestamp = getKyivTime();

    const visitorIP = await getVisitorIP();
    const locationInfo = await getLocationInfo(visitorIP);
    const userAgent = navigator.userAgent;

    const visitData = {
        timestamp: visitTimestamp,
        ip: visitorIP,
        country: locationInfo.country,
        city: locationInfo.city,
        region: locationInfo.region,
        userAgent: userAgent,
        page: window.location.pathname
    };

    // –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω—ñ –¥–∞–Ω—ñ
    let visitsData = JSON.parse(localStorage.getItem('visitsData')) || [];
    visitsData.push(visitData);

    // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω—ñ –¥–∞–Ω—ñ
    localStorage.setItem('visitsData', JSON.stringify(visitsData));

    // –û–Ω–æ–≤–ª—é—î–º–æ –ª—ñ—á–∏–ª—å–Ω–∏–∫
    updateVisitorCounter(visitsData.length);
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ª—ñ—á–∏–ª—å–Ω–∏–∫–∞ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ
function updateVisitorCounter(count) {
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —ñ—Å–Ω—É—î –ª—ñ—á–∏–ª—å–Ω–∏–∫
    let counterElement = document.getElementById('visitor-counter');

    // –Ø–∫—â–æ –Ω–µ —ñ—Å–Ω—É—î, —Å—Ç–≤–æ—Ä—é—î–º–æ –π–æ–≥–æ
    if (!counterElement) {
        counterElement = document.createElement('div');
        counterElement.id = 'visitor-counter';
        counterElement.style.position = 'fixed';
        counterElement.style.bottom = '10px';
        counterElement.style.right = '10px';
        counterElement.style.backgroundColor = 'rgba(0, 0, 0, 0.7)';
        counterElement.style.color = 'white';
        counterElement.style.padding = '8px 12px';
        counterElement.style.borderRadius = '20px';
        counterElement.style.fontSize = '14px';
        counterElement.style.fontWeight = 'bold';
        counterElement.style.cursor = 'pointer';
        counterElement.style.zIndex = '9999';
        counterElement.style.opacity = '0';

        // –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ –ø–æ–¥—ñ–π –¥–ª—è –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è –ª–æ–≥—ñ–≤
        counterElement.addEventListener('click', showVisitsLog);

        document.body.appendChild(counterElement);
    }

    // –û–Ω–æ–≤–ª—é—î–º–æ —Ç–µ–∫—Å—Ç –ª—ñ—á–∏–ª—å–Ω–∏–∫–∞
    counterElement.textContent = `üëÅÔ∏è ${count}`;
}

function showVisitsLog() {
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –¥–∞–Ω—ñ
    const visitsData = JSON.parse(localStorage.getItem('visitsData')) || [];

    if (visitsData.length === 0) {
        alert('–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –ø—Ä–æ –≤—ñ–¥–≤—ñ–¥—É–≤–∞–Ω–Ω—è');
        return;
    }

    // –°—Ç–≤–æ—Ä—é—î–º–æ BOM (Byte Order Mark) –¥–ª—è –∫–æ—Ä–µ–∫—Ç–Ω–æ–≥–æ —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è UTF-8
    const BOM = "\uFEFF";

    // –§–æ—Ä–º—É—î–º–æ CSV —Ä—è–¥–æ–∫ –¥–ª—è Excel –∑ BOM –Ω–∞ –ø–æ—á–∞—Ç–∫—É
    let csvContent = 'data:text/csv;charset=utf-8,' + encodeURIComponent(BOM);

    // –î–æ–¥–∞—î–º–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫
    csvContent += encodeURIComponent('–î–∞—Ç–∞ —ñ —á–∞—Å,IP-–∞–¥—Ä–µ—Å–∞,–ö—Ä–∞—ó–Ω–∞,–ú—ñ—Å—Ç–æ,–†–µ–≥—ñ–æ–Ω,User Agent,–°—Ç–æ—Ä—ñ–Ω–∫–∞\n');

    // –î–æ–¥–∞—î–º–æ –¥–∞–Ω—ñ
    visitsData.forEach(visit => {
        const row = [
            visit.timestamp,
            visit.ip,
            visit.country,
            visit.city,
            visit.region,
            visit.userAgent,
            visit.page
        ].map(value => `"${value}"`).join(',');

        csvContent += encodeURIComponent(row + '\n');
    });

    // –°—Ç–≤–æ—Ä—é—î–º–æ –µ–ª–µ–º–µ–Ω—Ç –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
    const link = document.createElement('a');
    link.setAttribute('href', csvContent);
    link.setAttribute('download', `visits_${new Date().toISOString().slice(0, 10)}.csv`);

    // –Ü–º—ñ—Ç—É—î–º–æ –∫–ª—ñ–∫ –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
}

// –ó–∞–ø—É—Å–∫–∞—î–º–æ –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —Å—Ç–æ—Ä—ñ–Ω–∫–∏
document.addEventListener('DOMContentLoaded', trackVisit);